[{"C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\index.js":"1","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\App.js":"2","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\canvas\\canvas.js":"3","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\curves\\curve.js":"4","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\curves\\curveCollector.js":"5","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\curves\\CurveTypes.js":"6","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\curves\\line.js":"7","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\canvas\\GLCanvas.js":"8","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\model\\model.js":"9","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\compgeom\\compgeom.js":"10","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\canvas\\grid.js":"11"},{"size":2227,"mtime":1613792062273,"results":"12","hashOfConfig":"13"},{"size":144,"mtime":1613670659834,"results":"14","hashOfConfig":"13"},{"size":17379,"mtime":1613792352825,"results":"15","hashOfConfig":"13"},{"size":548,"mtime":1613006784816,"results":"16","hashOfConfig":"13"},{"size":3304,"mtime":1612105788330,"results":"17","hashOfConfig":"13"},{"size":77,"mtime":1611964647251,"results":"18","hashOfConfig":"13"},{"size":3551,"mtime":1613243198624,"results":"19","hashOfConfig":"13"},{"size":98,"mtime":1612131762946,"results":"20","hashOfConfig":"13"},{"size":7080,"mtime":1613613226851,"results":"21","hashOfConfig":"13"},{"size":3731,"mtime":1613609416652,"results":"22","hashOfConfig":"13"},{"size":1286,"mtime":1613792250635,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mynf6e",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\index.js",[],"C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\App.js",[],["50","51"],"C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\canvas\\canvas.js",["52","53","54","55","56","57","58","59","60"],"C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\curves\\curve.js",[],"C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\curves\\curveCollector.js",["61","62","63"],"import { CurveTypes } from './CurveTypes'\r\nimport curve from '../curves/curve'\r\nimport line from '../curves/line'\r\nclass curveCollector {\r\n    constructor(){\r\n        this.curve = null;\r\n        this.prevPt = {x: 0.0, y: 0.0};\r\n        this.tempPt = {x: 0.0, y: 0.0};\r\n        this.curveType = CurveTypes.LINE;\r\n    }\r\n\r\n    setCurveType(type){\r\n        if (this.curveType === type ) {\r\n            return\r\n        }\r\n        switch (type) {\r\n            case CurveTypes.LINE:\r\n                this.curveType = CurveTypes.LINE;\r\n                break;\r\n            case CurveTypes.POLYLINE:\r\n                this.curveType = CurveTypes.POLYLINE;\r\n                break;\r\n            case CurveTypes.CIRCLE:\r\n                this.curveType = CurveTypes.CIRCLE;\r\n                break;\r\n        }\r\n    }\r\n\r\n    getCurveType(){\r\n        return this.curveType;\r\n    }\r\n\r\n    startCurveCollection(){\r\n        if (this.curve != null ) {\r\n            delete this.curve;\r\n        }\r\n        switch (this.curveType) {\r\n            case CurveTypes.LINE:\r\n                this.curve = new line();\r\n                break;\r\n            //TODO: create new curve classes for polyline and circle\r\n            case CurveTypes.POLYLINE:\r\n                this.curve = new line();\r\n                break;\r\n            case CurveTypes.CIRCLE:\r\n                this.curve = new line();\r\n                break;\r\n        }\r\n    }\r\n\r\n    endCurveCollection(){\r\n        this.curve = null;\r\n    }\r\n\r\n    isActive(){\r\n        if(this.curve != null){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isCollecting(){\r\n        if (this.curve != null) {\r\n            if (this.curve.getNumberOfPoints() > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getCollectedCurve(){\r\n        return this.curve;\r\n    }\r\n\r\n    hasFinished(){\r\n        if (this.curve != null) {\r\n            if (this.curve.isPossible()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isUnlimited(){\r\n        if (this.curve != null) {\r\n            if (this.curve.isUnlimited()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    insertPoint(x, y, tol){\r\n        if (this.isCollecting()) {\r\n            if (Math.abs(x - this.prevPt.x) <= tol && Math.abs(y - this.prevPt.y) <= tol) {\r\n                return 0;\r\n            }\r\n        }\r\n        this.curve.addPoint(x,y);\r\n        this.prevPt.x = x;\r\n        this.prevPt.y = y;\r\n        return 1;\r\n    }\r\n\r\n    addTempPoint(x, y){\r\n        this.tempPt.x = x;\r\n        this.tempPt.y = y;\r\n\r\n        return 1;\r\n    }\r\n\r\n    getDrawPoints(){\r\n        let pts = this.curve.getPointsToDraw(this.tempPt);\r\n        return pts;\r\n    }\r\n\r\n    getPoints(){\r\n        let pts = this.curve.getPoints();\r\n        return pts;\r\n    }\r\n\r\n    getBoundBox(bbox){\r\n        if (this.curve != null) {\r\n            return;\r\n        }\r\n        this.curve.getBoundBox(bbox);\r\n    }\r\n    \r\n    reset(){\r\n        if (this.curve != null) {\r\n            delete this.curve;\r\n        }\r\n        this.curve = null;\r\n    }\r\n\r\n    kill(){\r\n        if (this.curve != null) {\r\n            delete this.curve;\r\n        }\r\n        delete this;\r\n    }\r\n}\r\n\r\nexport default curveCollector;","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\curves\\CurveTypes.js",[],"C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\curves\\line.js",[],"C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\canvas\\GLCanvas.js",[],"C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\model\\model.js",["64"],"import {computeSegmentSegmentIntersection, IntersectionType} from '../compgeom/compgeom'\r\nimport line from '../curves/line'\r\n\r\nclass model {\r\n    constructor(){\r\n        this.curves = [];\r\n    }\r\n\r\n    isEmpty(){\r\n        return this.curves.length < 1;\r\n    }\r\n\r\n    getCurves(){\r\n        return this.curves;\r\n    }\r\n\r\n    getBoundingBox(bbox){\r\n        if (this.curves.length < 1) {\r\n            bbox.xmin = 0.0;\r\n            bbox.xmax = 10.0;\r\n            bbox.ymin = 0.0;\r\n            bbox.xmax = 10.0;\r\n            return;\r\n        }\r\n        this.curves[0].getBoundingBox(bbox);\r\n        for (let i = 0; i < this.curves.length; i++) {\r\n            var bbox_c;\r\n            this.curves[i].getBoundingBox(bbox_c)\r\n            if (bbox_c.xmin < bbox.xmin) {\r\n                bbox.xmin = bbox_c.xmin;\r\n            }\r\n\r\n            if (bbox_c.xmax > bbox.xmax) {\r\n                bbox.xmax = bbox_c.xmax;\r\n            }\r\n\r\n            if (bbox_c.ymin < bbox.ymin) {\r\n                bbox.ymin = bbox_c.ymin;\r\n            }\r\n\r\n            if (bbox_c.ymax > bbox.ymax) {\r\n                bbox.ymax = bbox_c.ymax;\r\n            }\r\n        }\r\n    }\r\n\r\n    snapToCurve(pos, pick_tol){\r\n        if (this.curves.length < 1) {\r\n            return false;\r\n        }\r\n\r\n        var xC, yC;\r\n        var xClst = pos.x;\r\n        var yClst = pos.y;\r\n        var id_target = -1;\r\n        var dmin = pick_tol;\r\n        var d;\r\n\r\n        for (let i = 0; i < this.curves.length; i++) {\r\n            xC = this.curves[i].getXinit();\r\n            yC = this.curves[i].getYinit();\r\n\r\n            if (Math.abs(pos.x - xC) < pick_tol && Math.abs(pos.y - yC) < pick_tol ) {\r\n                d = Math.sqrt((pos.x - xC)*(pos.x - xC)+(pos.y - yC)*(pos.y - yC));\r\n\r\n                if (d<dmin) {\r\n                    xClst = xC;\r\n                    yClst = yC;\r\n                    dmin = d;\r\n                    id_target = i;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            xC = this.curves[i].getXend();\r\n            yC = this.curves[i].getYend();\r\n\r\n            if (Math.abs(pos.x - xC) < pick_tol && Math.abs(pos.y - yC) < pick_tol ) {\r\n                d = Math.sqrt((pos.x - xC)*(pos.x - xC)+(pos.y - yC)*(pos.y - yC));\r\n                if (d<dmin) {\r\n                    xClst = xC;\r\n                    yClst = yC;\r\n                    dmin = d;\r\n                    id_target = i;\r\n                }\r\n                continue;\r\n            }\r\n            xC = pos.x;\r\n            yC = pos.y;\r\n            d = this.curves[i].closestPoint({x: xC, y: yC});\r\n            if (d<dmin) {\r\n                xClst = xC;\r\n                yClst = yC;\r\n                dmin = d;\r\n                id_target=i;\r\n            }\r\n        }\r\n        \r\n        if (id_target < 0) {\r\n            return false;\r\n        }\r\n        pos.x = xClst;\r\n        pos.y = yClst;\r\n        return true;\r\n    }\r\n\r\n    insertCurve(curve){\r\n        this.curves.push(curve);\r\n    }\r\n\r\n    selectFence(xmin, xmax, ymin, ymax){\r\n        if (this.curves.length < 1) {\r\n            return;\r\n        }\r\n\r\n        var inFence;\r\n        var bbox = {};\r\n        this.curves.forEach(curve => {\r\n            curve.getBoundBox(bbox);\r\n            (bbox.xmin < xmin || bbox.xmax > xmax || bbox.ymin < ymin || bbox.ymax > ymax) ? inFence = false : inFence = true;\r\n            if (inFence) {\r\n                curve.isSelected() ? curve.setSelected(false) : curve.setSelected(true);\r\n            }//when implementation of shift key is done insert else{if(shiftkey){curve.setSelected(false)}}\r\n        });\r\n    }\r\n\r\n    intersectTwoCurves(){\r\n        if (this.curves.length < 1) {\r\n            return\r\n        }\r\n\r\n        var id_target12 = -1;\r\n        var id_target34 = -1;\r\n\r\n        for (let i = 0; i < this.curves.length; i++) {\r\n            if (this.curves[i].isSelected()) {\r\n                if (id_target12 === -1) {\r\n                    id_target12 = i;\r\n                } else if (id_target34 === -1)\r\n                {\r\n                    id_target34 = i;\r\n                } else \r\n                {\r\n                    alert(\"More than two lines are selected \\n\" +\r\n                    \"Please be sure that only two curves are selected\");\r\n                    return;\r\n                }\r\n            }            \r\n        }\r\n\r\n        if (id_target12 === -1) {\r\n            alert(\"There aren't any lines selected \\n\" +\r\n            \"Please be sure that two curves are selected\");\r\n            return;\r\n        }\r\n\r\n        if (id_target34 === -1) {\r\n            alert(\"Exactly one line is selected \\n\" +\r\n            \"Please be sure that two curves are selected\");\r\n            return;\r\n        }\r\n\r\n        //Get lines' points\r\n        var pts12 = this.curves[id_target12].getPoints();\r\n        var pts34 = this.curves[id_target34].getPoints();\r\n        var pt1 = pts12[0];\r\n        var pt2 = pts12[1];\r\n        var pt3 = pts34[0];\r\n        var pt4 = pts34[1];\r\n\r\n        //Compute intersection between two lines\r\n        var pi;\r\n        var ti_12 = 0.0;\r\n        var ti_34 = 0.0;\r\n\r\n        var ref_obj = {p1: pt1, p2: pt2, p3: pt3, p4: pt4, pi: pi, t12: ti_12, t34: ti_34};\r\n\r\n        var status = computeSegmentSegmentIntersection(ref_obj);\r\n        var deleteLine1 = false;\r\n        var deleteLine2 = false;\r\n        var createdLine = false;\r\n        switch (status) {\r\n            case IntersectionType.DO_NOT_INTERSECT:\r\n                alert(\"Cannot peform instersection \\n The two selected lines do not intersect\")\r\n                break;\r\n            case IntersectionType.DO_INTERSECT:\r\n                var ln_a = new line(ref_obj.p1.x, ref_obj.p1.y, ref_obj.pi.x, ref_obj.pi.y);\r\n                var ln_b = new line(ref_obj.pi.x, ref_obj.pi.y, ref_obj.p2.x, ref_obj.p2.y);\r\n                var ln_c = new line(ref_obj.p3.x, ref_obj.p3.y, ref_obj.pi.x, ref_obj.pi.y);\r\n                var ln_d = new line(ref_obj.pi.x, ref_obj.pi.y, ref_obj.p4.x, ref_obj.p4.y);\r\n                deleteLine1 = true;\r\n                deleteLine2 = true;\r\n                createdLine = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (deleteLine1 && deleteLine2) {\r\n            this.delCurve(id_target12);\r\n            //this.delCurve(id_target34);\r\n            id_target34 = -1;\r\n            for(let i = 0; i < this.curves.length; i++)\r\n            {\r\n                if( this.curves[i].isSelected() )\r\n                {\r\n                    id_target34 = i;\r\n                }\r\n            }\r\n            if( id_target34 !== -1 ){\r\n                this.delCurve(id_target34);\r\n            }\r\n        }\r\n\r\n        if (ln_a != null) {\r\n            this.curves.push(ln_a);\r\n        }\r\n        if (ln_b != null) {\r\n            this.curves.push(ln_b);\r\n        }\r\n        if (ln_c != null) {\r\n            this.curves.push(ln_c);\r\n        }\r\n        if (ln_d != null) {\r\n            this.curves.push(ln_d);\r\n        }\r\n    }\r\n\r\n    delCurve(curve_id){\r\n        delete this.curves[curve_id];\r\n        this.curves.splice(curve_id, 1);\r\n    }\r\n}\r\n\r\nexport default model;","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\compgeom\\compgeom.js",["65","66","67","68"],"export const IntersectionType = {\r\n    DO_NOT_INTERSECT: 0,\r\n    DO_INTERSECT: 1,\r\n    TOUCH: 2,\r\n    COLLINEAR: 3\r\n}\r\n\r\nexport const SIGN = {\r\n    NEGATIVE: -1,\r\n    ZERO: 0,\r\n    POSITIVE: 1\r\n}\r\n\r\nconst ABSTOL = 1e-7;\r\n\r\nfunction area2d(p1,p2,p3){\r\n    var A = {\r\n        x: p2.x - p1.x,\r\n        y: p2.y - p1.y\r\n    },\r\n    B = {\r\n        x: p3.x - p1.x,\r\n        y: p3.y - p1.y\r\n    }\r\n\r\n    //crossproduct\r\n\r\n    return (A.x*B.y - B.x*A.y);\r\n}\r\n\r\nfunction orientation(p1, p2, p3){\r\n    var val = (p2.y - p1.y)*(p3.x - p2.x) - \r\n                (p2.x - p1.x)*(p3.y - p2.y);\r\n\r\n    if (val === 0) {\r\n        return SIGN.ZERO //colinear\r\n    }\r\n\r\n    return (val > 0) ? SIGN.POSITIVE : SIGN.NEGATIVE //clock or counterclock wise\r\n}\r\n\r\nexport function computeSegmentSegmentIntersection(params) {\r\n    var area123 = 0.0; // twice the area of triangle 123\r\n    var area124 = 0.0; // twice the area of triangle 124\r\n    var area341 = 0.0; // twice the area of triangle 341\r\n    var area342 = 0.0; // twice the area of triangle 342\r\n\r\n    var x12_l, x12_r;\r\n    var x34_l, x34_r;\r\n\r\n    x12_l = (params.p1.x < params.p2.x) ? params.p1.x : params.p2.x;\r\n    x12_r = (params.p1.x > params.p2.x) ? params.p1.x : params.p2.x;\r\n    x34_l = (params.p3.x < params.p4.x) ? params.p3.x : params.p4.x;\r\n    x34_r = (params.p3.x > params.p4.x) ? params.p3.x : params.p4.x;\r\n\r\n    if ((x12_r + ABSTOL) < x34_l || x34_r < (x12_l-ABSTOL)) {\r\n        return IntersectionType.DO_NOT_INTERSECT;\r\n    }\r\n\r\n    var y12_b, y12_t;\r\n    var y34_b, y34_t;\r\n\r\n    y12_b = (params.p1.y < params.p2.y) ? params.p1.y : params.p2.y;\r\n    y12_t = (params.p1.y > params.p2.y) ? params.p1.y : params.p2.y;\r\n    y34_b = (params.p3.y < params.p4.y) ? params.p3.y : params.p4.y;\r\n    y12_b = (params.p3.y > params.p4.y) ? params.p3.y : params.p4.y;\r\n\r\n    if ((y12_t + ABSTOL) < y34_b || y34_t < (y12_b-ABSTOL)) {\r\n        return IntersectionType.DO_NOT_INTERSECT;\r\n    }\r\n\r\n    var sign123 = orientation(params.p1, params.p2, params.p3);\r\n    var sign124 = orientation(params.p1, params.p2, params.p4);\r\n\r\n    if (sign123 === SIGN.ZERO && sign124 === SIGN.ZERO) {\r\n        return IntersectionType.COLLINEAR;\r\n    }\r\n\r\n    //check if second segment is on the same side of first segment\r\n\r\n    if (orientation(params.p1, params.p2, params.p3) === SIGN.POSITIVE && \r\n        orientation(params.p1, params.p2, params.p4) === SIGN.POSITIVE) \r\n    {\r\n        console.log('a')\r\n        return IntersectionType.DO_NOT_INTERSECT;\r\n    }\r\n    else if (orientation(params.p1, params.p2, params.p3) === SIGN.NEGATIVE && \r\n        orientation(params.p1, params.p2, params.p4) === SIGN.NEGATIVE) \r\n    {\r\n        console.log('b')\r\n        return IntersectionType.DO_NOT_INTERSECT;\r\n    }\r\n\r\n    //checks for first segment on the same side of second segment\r\n\r\n    if (orientation(params.p3, params.p4, params.p1) === SIGN.POSITIVE && \r\n        orientation(params.p3, params.p4, params.p2) === SIGN.POSITIVE) \r\n    {\r\n        console.log('c')\r\n        return IntersectionType.DO_NOT_INTERSECT;\r\n    }\r\n    else if (orientation(params.p3, params.p4, params.p1) === SIGN.NEGATIVE && \r\n        orientation(params.p3, params.p4, params.p2) === SIGN.NEGATIVE) \r\n    {\r\n        console.log('d')\r\n        return IntersectionType.DO_NOT_INTERSECT;\r\n    }\r\n\r\n    //treat the touch cases\r\n\r\n    params.t34 = area2d(params.p1,params.p2,params.p3)/(area2d(params.p1,params.p2,params.p3) - area2d(params.p1,params.p2,params.p4));\r\n\r\n    var v34 = {\r\n        x: params.p4.x - params.p3.x,\r\n        y: params.p4.y - params.p3.y\r\n    }\r\n\r\n    params.pi = {\r\n        x: params.p3.x + params.t34*v34.x,\r\n        y: params.p3.y + params.t34*v34.y\r\n    }\r\n\r\n    return IntersectionType.DO_INTERSECT;\r\n}","C:\\Users\\rodri\\OneDrive\\Documents\\01 - PUC-Rio\\06 - Dissertação\\03 - CurveCollector\\curve-collector\\src\\canvas\\grid.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":13,"nodeType":"75","messageId":"76","endLine":2,"endColumn":16},{"ruleId":"73","severity":1,"message":"77","line":4,"column":8,"nodeType":"75","messageId":"76","endLine":4,"endColumn":13},{"ruleId":"73","severity":1,"message":"78","line":7,"column":9,"nodeType":"75","messageId":"76","endLine":7,"endColumn":19},{"ruleId":"79","severity":1,"message":"80","line":129,"column":37,"nodeType":"75","messageId":"81","endLine":129,"endColumn":40},{"ruleId":"82","severity":1,"message":"83","line":151,"column":13,"nodeType":"84","messageId":"85","endLine":152,"endColumn":23},{"ruleId":"73","severity":1,"message":"86","line":166,"column":33,"nodeType":"75","messageId":"76","endLine":166,"endColumn":41},{"ruleId":"79","severity":1,"message":"80","line":195,"column":33,"nodeType":"75","messageId":"81","endLine":195,"endColumn":36},{"ruleId":"87","severity":1,"message":"88","line":256,"column":25,"nodeType":"89","messageId":"90","endLine":258,"endColumn":14},{"ruleId":"87","severity":1,"message":"91","line":265,"column":33,"nodeType":"89","messageId":"90","endLine":267,"endColumn":14},{"ruleId":"73","severity":1,"message":"77","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":13},{"ruleId":"92","severity":1,"message":"93","line":16,"column":9,"nodeType":"94","messageId":"95","endLine":26,"endColumn":10},{"ruleId":"92","severity":1,"message":"93","line":37,"column":9,"nodeType":"94","messageId":"95","endLine":48,"endColumn":10},{"ruleId":"73","severity":1,"message":"96","line":193,"column":17,"nodeType":"75","messageId":"76","endLine":193,"endColumn":28},{"ruleId":"73","severity":1,"message":"97","line":43,"column":9,"nodeType":"75","messageId":"76","endLine":43,"endColumn":16},{"ruleId":"73","severity":1,"message":"98","line":44,"column":9,"nodeType":"75","messageId":"76","endLine":44,"endColumn":16},{"ruleId":"73","severity":1,"message":"99","line":45,"column":9,"nodeType":"75","messageId":"76","endLine":45,"endColumn":16},{"ruleId":"73","severity":1,"message":"100","line":46,"column":9,"nodeType":"75","messageId":"76","endLine":46,"endColumn":16},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'dat' is defined but never used.","Identifier","unusedVar","'curve' is defined but never used.","'CurveTypes' is defined but never used.","no-redeclare","'pos' is already defined.","redeclared","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'pick_tol' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'vertices'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'pt_vertices'.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'createdLine' is assigned a value but never used.","'area123' is assigned a value but never used.","'area124' is assigned a value but never used.","'area341' is assigned a value but never used.","'area342' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]